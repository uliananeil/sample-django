version: 2.1
orbs:
  terraform: circleci/terraform@3.1
  aws-cli: circleci/aws-cli@3.1

parameters:
  infrastructure:
    type: boolean
    default: false
  image-create:
    type: boolean
    default: false
jobs:
  create-infrastructure:
    executor: terraform/default
    steps:
      - checkout
      - run: >
          cd infrastructure/

          terraform init -backend-config="bucket=$STATE_BUCKET" -backend-config="key=terraform.tfstate" -backend-config="region=$REGION"

          terraform apply -auto-approve

      - persist_to_workspace:
          root: .
          paths:
            - .

  destroy-infrastructure:
    executor: terraform/default
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/destroy:
          path: infrastructure/

  test-cluster:
    docker:
      - image: cimg/aws:2022.11
    steps:
      - run: >
          aws ecs describe-clusters --cluster $TF_VAR_cluster_name --region $TF_VAR_region  --query 'clusters[*].[status]' --output text > status.txt
          if grep -q 'INACTIVE' status.txt; then exit 1; else exit 0; fi

  build-and-push-image:
    docker:
      - image: cimg/aws:2022.11
    steps:
      - checkout
      - run: >
          aws rds describe-db-instances --query 'DBInstances[*].[Endpoint.Address]' --filters Name=db-instance-id,Values='rds' --output text > db_ip.txt

          sed -i "s/<DB_IP>/$(cat ./db_ip.txt)/g" ./app/Dockerfile
          docker build -t django-app ./app/

          aws ecr get-login-password --region $TF_VAR_region | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${TF_VAR_ecr_repo}

          docker tag django-app:latest ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${TF_VAR_ecr_repo}
          docker push ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${TF_VAR_ecr_repo}
      - persist_to_workspace:
          root: .
          paths:
            - .
  dive-test:
    docker:
      - image: cimg/base:2023.01
    steps:
      - attach_workspace:
          at: .
      - run: >
          sudo wget
          https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb
          sudo apt install ./dive_0.9.2_linux_amd64.deb
          sudo dive --ci ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${TF_VAR_ecr_repo}:latest
      - persist_to_workspace:
          root: .
          paths:
            - .

  deploy-image:
    executor: aws-cli/default
    steps:
      - attach_workspace:
          at: .
      - run: >
          aws ecs update-service --cluster $TF_VAR_cluster_name --service
          $TF_VAR_service_name --force-new-deployment

workflows:
  infrastructure-deploy:
    when: << pipeline.parameters.infrastructure >>
    jobs:
      - create-infrastructure
      - hold-destroy:
          type: approval
          requires: 
            - create-infrastructure
      - destroy-infrastructure:
          requires: 
            - hold-destroy

  app-deploy:
    when: << pipeline.parameters.image-create >>
    jobs:
      - test-cluster
      - build-and-push-image:
          requires:
            - test-cluster
      - dive-test:
          requires:
            - build-and-push-image
      - hold-deploy: 
          type: approval
          requires:
            - dive-test
      - deploy-image:
          requires:
            - hold-deploy
